// Socket.IO Client Library (minified version)
// This is a placeholder - in production, you would download the actual Socket.IO client library
// For now, we'll create a simple WebSocket wrapper

(function() {
    'use strict';
    
    function io(url, options) {
        return new Socket(url, options);
    }
    
    function Socket(url, options) {
        this.url = url || window.location.origin;
        this.options = options || {};
        this.connected = false;
        this.listeners = {};
        
        this.connect();
    }
    
    Socket.prototype.connect = function() {
        const wsUrl = this.url.replace(/^http/, 'ws') + '/socket.io/?EIO=4&transport=websocket';
        this.ws = new WebSocket(wsUrl);
        
        this.ws.onopen = () => {
            this.connected = true;
            this.emit('connect');
        };
        
        this.ws.onclose = () => {
            this.connected = false;
            this.emit('disconnect');
        };
        
        this.ws.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                if (data.type && this.listeners[data.type]) {
                    this.listeners[data.type].forEach(callback => callback(data));
                }
            } catch (e) {
                // Handle non-JSON messages
            }
        };
        
        this.ws.onerror = (error) => {
            this.emit('error', error);
        };
    };
    
    Socket.prototype.on = function(event, callback) {
        if (!this.listeners[event]) {
            this.listeners[event] = [];
        }
        this.listeners[event].push(callback);
    };
    
    Socket.prototype.emit = function(event, data) {
        if (this.listeners[event]) {
            this.listeners[event].forEach(callback => callback(data));
        }
    };
    
    Socket.prototype.disconnect = function() {
        if (this.ws) {
            this.ws.close();
        }
    };
    
    // Make io available globally
    if (typeof window !== 'undefined') {
        window.io = io;
    }
    
    // Export for Node.js
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = io;
    }
})();